function NKB(basefile) {

    /*

        section: namename
        part: idvar1=±0var2=ň1024var3=క test text 
        var types: 
            Boolean: ± (in value: 0 for false, 1 for true)
            Number: ň
            String: క
        variable value: ±1 | ň255 | కtext
        in string value '\n' replacing to ''

    */
   
    const fs = require('fs');
    let bt = fs.readFileSync(basefile, 'utf-8');
    let lastBaseFileUpdate;
    let changed = false;

    fs.writeFileSync(basefile, bt, 'utf-8');

    lastBaseFileUpdate = fs.statSync(basefile).mtimeMs;


    function rb() {

        try {

            let lastUpdate = fs.statSync(basefile).mtimeMs;

            if(lastUpdate !== lastBaseFileUpdate) {

                try {

                    bt = fs.readFileSync(basefile, 'utf-8');
                    lastBaseFileUpdate = lastUpdate;
                    return true;

                } catch (err) {
                    console.error(`node-nk-base readBase: can't read file with this path(${basefile})!`);
                    return null;
                }

            } else return true;
            
        } catch {
            console.error(`node-nk-base readBase: can't read file with this path(${basefile})!`);
            return null;
        }
        
    }

    rb();


    this.bool = '±';
    this.num = 'ň';
    this.str = 'క';

    function is_section(section) {

        section = String(section);

        let ss = bt.indexOf(`${section}`);
        if(ss === -1) return false;
        let se = bt.indexOf(`${section}`, ss+section.length+2);
        if(se !== -1) return true; else return false;

    }


    function is_part(section, id) {

        let ss = bt.indexOf(`${section}`);
        if(ss === -1) return false;
        let se = bt.indexOf(`${section}`, ss+section.length+2);
        if(se === -1) return false;
        let ps = bt.indexOf(`${id}`, ss+section.length+2);
        if(ps !== -1 && ps < se) return true; else return false;

    }


    function is_variable(section, id, variable) {

        let ss = bt.indexOf(`${section}`);
        if(ss === -1) return false;
        let se = bt.indexOf(`${section}`, ss+section.length+2);
        if(se === -1) return false;
        let ps = bt.indexOf(`${id}`, ss+section.length+2);
        if(ps === -1 || ps > se) return false;
        let pe = bt.indexOf(``, ps);
        if(pe === -1) return false;
        let vs = bt.substring(ps+String(id).length+4, pe+1).indexOf((`${variable}=`));
        if(vs !== -1) return true; else return false;
        
    }


    function get(section, id, variable, fromMethod) {

        id = String(id);

        let ss = bt.indexOf(`${section}`);
        if(ss === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let se = bt.indexOf(`${section}`, ss);
        if(se === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let ps = bt.indexOf(`${id}`, ss);
        if(ps === -1 || ps > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let pe = bt.indexOf(``, ps);
        if(pe === -1 || pe > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let part = bt.substring(ps+id.length+4, pe+1);


        if(Array.isArray(variable)) {

            let values = [];

            for(var i = 0; i < variable.length; i++) {

                let vs = part.indexOf((`${variable[i]}=`));
                if(vs === -1) {
                    console.error(`node-nk-base ${fromMethod}(variable): This variable(${variable[i]}) doesn't exists!`);
                    values.push(null);
                    continue;
                }
                let ve = part.indexOf(``, vs);

                let v = part.substring(vs+variable[i].length+2, ve);
            
                if(v.startsWith(`ň`)) values.push(Number(v.substring(2, v.length))); else

                if(v.startsWith(`క`)) values.push(v.substring(2, v.length).replace(//g, '\n').replace(/ /g, ``)); else

                if(v.startsWith(`±`)) {
                    v = v.substring(2, v.length);
                    if(v === '0') values.push(false);
                    if(v === '1') values.push(true);
                } else {

                    console.error(`node-nk-base ${fromMethod}: Can't read type of value of this variable(${variable[i]})!`);
                    values.push(null);

                }

            }

            return values;

        } else {

            let vs = part.indexOf((`${variable}=`));
            if(vs === -1) {
                console.error(`node-nk-base ${fromMethod}(variable): This variable(${variable}) doesn't exists!`);
                return null;
            }
            let ve = part.indexOf(``, vs);

            let v = part.substring(vs+variable.length+2, ve);
        
            if(v.startsWith(`ň`)) return Number(v.substring(2, v.length));

            if(v.startsWith(`క`)) return v.substring(2, v.length).replace(//g, '\n').replace(/ /g, ``);

            if(v.startsWith(`±`)) {
                v = v.substring(2, v.length);
                if(v === '0') return false;
                if(v === '1') return true;
            }

            console.error(`node-nk-base ${fromMethod}: Can't read type of value of this variable(${variable})!`);
            return null;

        }

    }
   
   
    function set(section, id, variable, value, fromMethod) {

        id = String(id);
       
        let ss = bt.indexOf(`${section}`);
        if(ss === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let se = bt.indexOf(`${section}`, ss);
        if(se === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let ps = bt.indexOf(`${id}`, ss);
        if(ps === -1 || ps > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let pe = bt.indexOf(``, ps);
        if(pe === -1 || pe > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let part = bt.substring(ps+id.length+4, pe+1);
        let vs = part.indexOf((`${variable}=`));
        if(vs === -1) {
            console.error(`node-nk-base ${fromMethod}(variable): This variable(${variable}) doesn't exists!`);
            return null;
        }
        let ve = part.indexOf(``, vs);

        let v = part.substring(vs+variable.length+2, ve);

        let t = false;

        if(v.startsWith(`ň`) && (Number(value) || Number(value) === 0)) {
            t = 'ň';
        }

        if(v.startsWith(`క`) && (String(value) || value === '')) {
            t = 'క';
            value = String(value).replace(/\n/g, '').replace(//g, ' ');
        }

        if(v.startsWith(`±`) && (value === true || value === false)) {
            t = '±';
            if(value === true) value = '1';
            if(value === false) value = '0';
        }

        if(!t) {
            console.error(`node-nk-base set(value): Type of value(${value}) doesn't match with type of variable(${variable})!`);
            return null;
        }

        bt = `${bt.substring(0, ps)}${id}${part.substring(0, vs)}${variable}=${t}${value}${part.substring(ve+1, part.length)}${bt.substring(pe+3, bt.length)}`;

        changed = true;

        return true;
       
    }
   
   
    function add(section, id, variable, value, fromMethod) {

        id = String(id);
       
        let ss = bt.indexOf(`${section}`);
        if(ss === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let se = bt.indexOf(`${section}`, ss);
        if(se === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let ps = bt.indexOf(`${id}`, ss);
        if(ps === -1 || ps > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let pe = bt.indexOf(``, ps);
        if(pe === -1 || pe > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let part = bt.substring(ps+id.length+4, pe+1);
        let vs = part.indexOf((`${variable}=`));
        if(vs === -1) {
            console.error(`node-nk-base ${fromMethod}(variable): This variable(${variable}) doesn't exists!`);
            return null;
        }
        let ve = part.indexOf(``, vs);

        let v = part.substring(vs+variable.length+2, ve);
        
        if(!v.startsWith(`ň`)) {
            console.error(`node-nk-base add(variable): Function "add" can be used only with number variables!`);
            return null;
        }

        if(!Number(value) && Number(value) !== 0) {
            console.error(`node-nk-base add(value): Add value for this variable(${variable}) isn't number!`);
            return null;
        }

        bt = `${bt.substring(0, ss)}${section}${bt.substring(ss+section.length+2, ps)}${id}${part.substring(0, vs)}${variable}=ň${Number(v.substring(2, v.length))+Number(value)}${part.substring(ve+1, part.length)}${bt.substring(pe+3, bt.length)}`;

        changed = true;

        return true;

    }


    function append(section, id, variable, value, fromMethod) {

        id = String(id);
       
        let ss = bt.indexOf(`${section}`);
        if(ss === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let se = bt.indexOf(`${section}`, ss);
        if(se === -1) {
            console.error(`node-nk-base ${fromMethod}(section): This section(${section}) doesn't exists!`);
            return null;
        }
        let ps = bt.indexOf(`${id}`, ss);
        if(ps === -1 || ps > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let pe = bt.indexOf(``, ps);
        if(pe === -1 || pe > se) {
            console.error(`node-nk-base ${fromMethod}(id): Part with this id(${id}) doesn't exists!`);
            return null;
        }
        let part = bt.substring(ps+id.length+4, pe+1);
        let vs = part.indexOf((`${variable}=`));
        if(vs === -1) {
            console.error(`node-nk-base ${fromMethod}(variable): This variable(${variable}) doesn't exists!`);
            return null;
        }
        let ve = part.indexOf(``, vs);

        let v = part.substring(vs+variable.length+2, ve);

        if(!v.startsWith(`క`)) {
            console.error(`node-nk-base append(variable): Function "append" can be used only with string variables!`);
            return null;
        }

        if(!String(value) && value !== '') {
            console.error(`node-nk-base append(value): Append value for this variable(${variable}) isn't string!`);
            return null;
        }

        bt = `${bt.substring(0, ss)}${section}${bt.substring(ss+section.length+2, ps)}${id}${part.substring(0, vs)}${variable}=క${v.substring(2, v.length)+String(value).replace(/\n/g, '').replace(//g, ' ')}${part.substring(ve+1, part.length)}${bt.substring(pe+3, bt.length)}`;

        changed = true;

        return true;
        
    }
   
   
    function get_all_count(section) {
 
        let ss = bt.indexOf(`${section}`);
        if(ss === -1) return null;
        let se = bt.indexOf(`${section}`, ss);
 
        let c = 0;
 
        for(var lastIndex = ss; lastIndex !== -1;) {
            lastIndex = bt.indexOf(``, lastIndex+1);
            if(lastIndex < se && lastIndex !== -1) c++; else break;
        }
 
        return c;
 
     }


    this.isSection = function(section) {
 
        if(!rb()) return null;
 
        return is_section(section);
 
    }

    this.isPart = function(section, id) {
 
        if(!rb()) return null;
        return is_part(section, id);
 
    }

    this.isVariable = function(section, id, variable) {

        if(!rb()) return null;
        return is_variable(section, id, variable);

    }


    this.get = function(section, id, variable) {

        if(!rb()) return null;

        return get(section, id, variable, 'get');

    }


    this.set = function(section, id, variable, value) {

        if(!rb()) return null;

        return set(section, id, variable, value, 'set');

    }
   
   
    this.add = function(section, id, variable, value) { 

        if(!rb()) return null; 

        return add(section, id, variable, value, 'add'); 

    } 

    this.append = function(section, id, variable, value) { 

        if(!rb()) return null; 

        return append(section, id, variable, value, 'append'); 

    }
    
    
    this.createSection = function(section) { 

        if(!rb()) return null; 

        if(is_section(section)) {
            console.error(`node-nk-base createSection: Section "${section}" already exists!`);
            return null;
        }

        bt = bt + `${section}${section}`;

        changed = true;

        return true;

    } 


    this.deleteSection = function(section) {

        if(!rb()) return null;

        let ss = bt.indexOf(`${section}`);
        if(ss === -1) {
            console.error(`node-nk-base deleteSection: Section "${section}" doesn't exists!`);
            return null;
        }
        let se = bt.indexOf(`${section}`, ss+section.length+2);
        if(se === -1) {
            console.error(`node-nk-base deleteSection: Section "${section}" doesn't exists!`);
            return null;
        }

        bt = bt.substring(0, ss) + bt.substring(se+section.length+2, bt.length);

        changed = true;

        return true;

    }


    this.findSection = function(section) { 

        section = String(section);

        if(!rb()) return null; 

        if(!is_section(section)) {
            console.error(`node-nk-base findSection(section): This section(${section}) doesn't exists!`);
            return null;
        } 


        this.isPart = function(id) { 

            if(!rb()) return null;
            return is_part(section, id);
    
        }
    
        this.isVariable = function(id, variable) {
    
            if(!rb()) return null;
            return is_variable(section, id, variable);
    
        }
         

        this.createPart = function(id, vars) { 

            if(!rb()) return null; 

            let ss = bt.indexOf(`${section}`);
            if(ss === -1) {
                console.error(`node-nk-base createPart(section): This section(${section}) doesn't exists!`);
                return null;
            }
            let se = bt.indexOf(`${section}`, ss+section.length+2);
            if(se === -1) {
                console.error(`node-nk-base createPart(section): This section(${section}) doesn't exists!`);
                return null;
            }
            let ps = bt.indexOf(`${id}`, ss+section.length+2);
            if(ps !== -1 && ps < se) {
                console.error(`node-nk-base createPart(id): Part with this id(${id}) already exists!`);
                return false;
            }

            let err = false; 

            let newbt = bt.substring(0, se) + `${id}`;

            for(var i = 0; i < vars.length; i++) {

                let x = vars[i];

                if(x[1] === Number || x[1] === String || x[1] === Boolean) { 

                    if(x[1] === Number && !Number(x[2]) && Number(x[2]) !== 0) {
                        console.error(`node-nk-base createPart(variables): Number value is wrong([${x[0]} = ${x[2]}])`);
                        err = true;
                        continue;
                    }
                    
                    if(x[1] === String && (String(x[2]) || x[2] === '')) {
                        x[2] = String(x[2]).replace(/\n/g, '');
                    } 

                    if(x[1] === Boolean && !(x[2] === true || x[2] === false)) {
                        console.error(`node-nk-base createPart(variables): Bool value is wrong([${x[0]} = ${x[2]}])`);
                        err = true;
                        continue;
                    } 

                    if(x[1] === Boolean && (x[2] === true || x[2] === false)) {
                        if(x[2] === true) x[2] = '1';
                        if(x[2] === false) x[2] = '0';
                    } 

                    newbt += `${x[0]}=${(x[1] === Number ? 'ň' : "") + (x[1] === String ? 'క' : "") + (x[1] === Boolean ? '±' : "")}${x[2]}`; 

                } else {
                    console.error(`node-nk-base createPart(variables): Type of this variable(${x[0]}) is wrong!`);
                    continue;
                } 

            }

            newbt += `` + bt.substring(se, bt.length);

            bt = newbt;

            changed = true;

            return true;
            
        } 


        this.deletePart = function(id) { 

            if(!rb()) return null;

            let ss = bt.indexOf(`${section}`);
            if(ss === -1) {
                console.error(`node-nk-base deletePart(section): This section(${section}) doesn't exists!`);
                return null;
            }
            let se = bt.indexOf(`${section}`, ss);
            if(se === -1) {
                console.error(`node-nk-base deletePart(section): This section(${section}) doesn't exists!`);
                return null;
            }
            let ps = bt.indexOf(`${id}`, ss);
            if(ps === -1 || ps > se) {
                console.error(`node-nk-base deletePart(id): Part with this id(${id}) doesn't exists!`);
                return null;
            }
            let pe = bt.indexOf(``, ps);
            if(pe === -1 || pe > se) {
                console.error(`node-nk-base deletePart(id): Part with this id(${id}) doesn't exists!`);
                return null;
            }

            bt = bt.substring(0, ps) + bt.substring(pe+2, bt.length);

            changed = true;

            return true;

        } 


        this.get = function(id, variable) { 

            if(!rb()) return null;

            return get(section, id, variable, 'section.get'); 

        } 
 

        this.set = function(id, variable, value) { 

            if(!rb()) return null; 

            return set(section, id, variable, value, 'section.get'); 

        } 
 

        this.add = function(id, variable, value) { 

            if(!rb()) return null;
            
            return add(section, id, variable, value, 'section.get');
            
        } 
 

        this.append = function(id, variable, value) { 

            if(!rb()) return null; 

            return append(section, id, variable, value, 'section.get');
            
        } 
 

        this.findPart = function(id) { 
 

            if(!rb()) return null; 

            id = String(id);

            if(!is_section(section)) {
                console.error(`node-nk-base findPart(section): This section(${section}) doesn't exists!`);
                return null;
            }
            
            if(!is_part(section, id)) {
                console.error(`node-nk-base findPart(id): Part with this id(${id}) doesn't exists!`);
                return null;
            }


            this.isVariable = function(variable) {

                if(!rb()) return null;
                return is_variable(section, id, variable);
        
            }


            this.get = function(variable) { 

                if(!rb()) return null;

                return get(section, id, variable, 'part.get'); 

            } 
 

            this.set = function(variable, value) { 

                if(!rb()) return null;

                return set(section, id, variable, value, 'part.get'); 

            } 
 

            this.add = function(variable, value) { 

                if(!rb()) return null;
                
                return add(section, id, variable, value, 'part.get');
                
            }
    
    
            this.append = function(variable, value) { 

                if(!rb()) return null; 
                
                return append(section, id, variable, value, 'part.get');
                
            }
 

            this.createVariable = function(variable, type, value) { 

                if(!rb()) return null;

                let ss = bt.indexOf(`${section}`);
                if(ss === -1) {
                    console.error(`node-nk-base part.createVariable(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let se = bt.indexOf(`${section}`, ss);
                if(se === -1) {
                    console.error(`node-nk-base part.createVariable(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let ps = bt.indexOf(`${id}`, ss);
                if(ps === -1 || ps > se) {
                    console.error(`node-nk-base part.createVariable(id): Part with this id(${id}) doesn't exists!`);
                    return;
                }
                let pe = bt.indexOf(``, ps);
                if(pe === -1 || pe > se) {
                    console.error(`node-nk-base part.createVariable(id): Part with this id(${id}) doesn't exists!`);
                    return;
                }
                let part = bt.substring(ps+id.length+4, pe+1);
                let vs = part.indexOf((`${variable}=`));
                if(vs !== -1) {
                    console.error(`node-nk-base part.createVariable(variable): This variable(${variable}) already exists!`);
                    return;
                }

                if(!(type === Number || type === String || type === Boolean)) {
                    console.error(`node-nk-base createVariable(type): Type of this variable(${variable}) is wrong!`);
                    return null;
                }

                let  t = false;

                if(type === Number && (Number(value) || Number(value) === 0)) t = Number;

                if(type === String && (String(value)  || value === '')) {
                    t = String;
                    value = value.replace(/\n/g, '');
                }

                if(type === Boolean && (value === true || value === false)) {
                    t = Boolean;
                    if(value === true) value = '1';
                    if(value === false) value = '0';
                }

                if(!t) {
                    console.error(`node-nk-base createVariable(value): Value for this variable(${variable}) doesn't match with type of this variable!`);
                    return null;
                }

                bt = bt.substring(0, pe) + `${variable}=${(type === Number ? 'ň' : "") + (type === String ? 'క' : "") + (type === Boolean ? '±' : "")}${value}` + bt.substring(pe, bt.length);

                changed = true;

                return true;

            }
 

            this.deleteVariable = function(variable) { 

                if(!rb()) return null; 

                let ss = bt.indexOf(`${section}`);
                if(ss === -1) {
                    console.error(`node-nk-base part.deleteVariable(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let se = bt.indexOf(`${section}`, ss);
                if(se === -1) {
                    console.error(`node-nk-base part.deleteVariable(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let ps = bt.indexOf(`${id}`, ss);
                if(ps === -1 || ps > se) {
                    console.error(`node-nk-base part.deleteVariable(id): Part with this id(${id}) doesn't exists!`);
                    return null;
                }
                let pe = bt.indexOf(``, ps);
                if(pe === -1 || pe > se) {
                    console.error(`node-nk-base part.deleteVariable(id): Part with this id(${id}) doesn't exists!`);
                    return null;
                }
                let part = bt.substring(ps+id.length+4, pe+1);
                let vs = part.indexOf((`${variable}=`));
                if(vs === -1) {
                    console.error(`node-nk-base part.deleteVariable(variable): This variable(${variable}) doesn't exists!`);
                    return null;
                }
                let ve = part.indexOf(``, vs);

                bt = `${bt.substring(0, ps)}${id}${part.substring(0, vs)}${part.substring(ve+1, part.length)}${bt.substring(pe+3, bt.length)}`;

                changed = true;

                return true;
                
            } 
 

            this.getVariableCount = function() { 

                if(!rb()) return null;

                let c = 0; 

                let ss = bt.indexOf(`${section}`);
                if(ss === -1) {
                    console.error(`node-nk-base getVariableCount(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let se = bt.indexOf(`${section}`, ss);
                if(se === -1) {
                    console.error(`node-nk-base getVariableCount(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let ps = bt.indexOf(`${id}`, ss);
                if(ps === -1 || ps > se) {
                    console.error(`node-nk-base getVariableCount(id): Part with this id(${id}) doesn't exists!`);
                    return null;
                }
                let pe = bt.indexOf(``, ps);
                if(pe === -1 || pe > se) {
                    console.error(`node-nk-base getVariableCount(id): Part with this id(${id}) doesn't exists!`);
                    return null;
                }
        
                for(var vs = -1, vs1 = -1, ve = ps;;) {
        
                    vs = bt.indexOf(``, ve);
                    vs1 = bt.indexOf(``, vs);
        
                    ve = bt.indexOf(``, vs1);
        
                    if((vs !== -1 && vs1 !== -1 && ve !== -1) && ve < pe) c++; else break;
        
                } 

                return c;
        
            }
        
        
            this.getVariables = function() { 

                if(!rb()) return null;

                let variables = []; 

                let ss = bt.indexOf(`${section}`);
                if(ss === -1) {
                    console.error(`node-nk-base getVariables(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let se = bt.indexOf(`${section}`, ss);
                if(se === -1) {
                    console.error(`node-nk-base getVariables(section): This section(${section}) doesn't exists!`);
                    return null;
                }
                let ps = bt.indexOf(`${id}`, ss);
                if(ps === -1 || ps > se) {
                    console.error(`node-nk-base getVariableCount(id): Part with this id(${id}) doesn't exists!`);
                    return null;
                }
                if(ps === -1 || ps > se) {
                    console.error(`node-nk-base getVariableCount(id): Part with this id(${id}) doesn't exists!`);
                    return null;
                }
                let pe = bt.indexOf(``, ps);
                if(pe === -1 || pe > se) {
                    console.error(`node-nk-base getVariableCount(id): Part with this id(${id}) doesn't exists!`);
                    return null;
                }
                let part = bt.substring(ps+id.length+4);
        
                for(var vs = -1, vs1 = -1, ve = -1;;) {
        
                    vs = part.indexOf(``, ve+1);
                    vs1 = part.indexOf(``, vs+1);
        
                    ve = part.indexOf(``, vs1+1);
        
                    if(vs !== -1 && vs1 !== -1 && ve !== -1) {
                        variables.push(part.substring(vs+1, vs1-2));
                    } else break;
        
                } 

                return variables;
        
            } 
 

        } 
 

        this.getAllCount = function() { 

            if(!rb()) return null; 

            if(!is_section(section)) {
                console.error(`node-nk-base findSection(section): This section(${section}) doesn't exists!`);
                return null;
            } 

            return get_all_count(section);
            
        } 
 

        this.getAll = function() { 

            if(!rb()) return null;

            let ss = bt.indexOf(`${section}`);
            if(ss === -1) {
                console.error(`node-nk-base getAll(section): This section(${section}) doesn't exists!`);
                return null;
            }
            let se = bt.indexOf(`${section}`, ss);
            if(se === -1) {
                console.error(`node-nk-base getAll(section): This section(${section}) doesn't exists!`);
                return null;
            } 

            let parts = []; 

            for(var lastIndex = ss;;) {

                lastIndex = bt.indexOf(``, lastIndex+1);
                if(lastIndex > se || lastIndex === -1) break;
                parts.push(bt.substring(lastIndex+2, bt.indexOf(``, lastIndex+2)));

            } 

            return parts; 

        }


        this.getOfAll = function(variable) {

            if(!rb()) return null;

            let ss = bt.indexOf(`${section}`);
            if(ss === -1) {
                console.error(`node-nk-base getAll(section): This section(${section}) doesn't exists!`);
                return null;
            }
            let se = bt.indexOf(`${section}`, ss);
            if(se === -1) {
                console.error(`node-nk-base getAll(section): This section(${section}) doesn't exists!`);
                return null;
            }

            let values = [];

            if(Array.isArray(variable)) {

                for(var ps = ss;;) {
                
                    ps = bt.indexOf(``, ps+1);
                    if(ps > se || ps === -1) break;
                
                    let id = bt.substring(ps+2, bt.indexOf(``, ps+2));
                    let part = bt.substring(ps+id.length+4, bt.indexOf(``, ps));

                    let v = [];

                    for(var i = 0; i < variable.length; i++) {
                
                        let vs = part.indexOf((`${variable[i]}=`));
                        if(vs === -1) {
                            v.push(null);
                            continue;
                        }
                        let ve = part.indexOf(``, vs);
                        
                        let value = part.substring(vs+variable[i].length+2, ve);
                        
                        if(value.startsWith(`ň`)) v.push(Number(value.substring(2, value.length))); else
                        
                        if(value.startsWith(`క`)) v.push(value.substring(2, value.length).replace(//g, '\n').replace(/ /g, ``)); else
                        
                        if(value.startsWith(`±`)) {
                            value = value.substring(2, value.length);
                            if(value === '0') v.push(false);
                            if(value === '1') v.push(true);
                        } else {
                            v.push(null);
                            continue;
                        }

                    }
                
                    values.push( { id: id,  value: v } );
                
                }

            } else {

                for(var ps = ss;;) {

                    ps = bt.indexOf(``, ps+1);
                    if(ps > se || ps === -1) break;

                    let id = bt.substring(ps+2, bt.indexOf(``, ps+2));
                    let part = bt.substring(ps+id.length+4, bt.indexOf(``, ps));

                    let v;

                    let vs = part.indexOf((`${variable}=`));
                    if(vs === -1) {
                        values.push( { id: id,  value: null } );
                        continue;
                    }
                    let ve = part.indexOf(``, vs);

                    let value = part.substring(vs+variable.length+2, ve);
                
                    if(value.startsWith(`ň`)) v = Number(value.substring(2, value.length)); else

                    if(value.startsWith(`క`)) v = value.substring(2, value.length).replace(//g, '\n').replace(/ /g, ``); else

                    if(value.startsWith(`±`)) {
                        value = value.substring(2, value.length);
                        if(value === '0') v = false;
                        if(value === '1') v = true;
                    } else {
                        values.push( { id: id,  value: null } );
                        continue;
                    }

                    values.push( { id: id,  value: v } );

                }

            }
            
            return values;

        }
 

    } 
 

    this.getSectionCount = function() { 

        if(!rb()) return null; 

        let c = 0; 

        for(var ss = -1, ss1 = -1, se = -1;;) { 

            ss = bt.indexOf(``, se+1);
            ss1 = bt.indexOf(``, ss+1); 

            let section = bt.substring(ss+1, ss1); 

            se = bt.indexOf(`${section}`, ss1); 

            if(ss !== -1 && ss1 !==-1 && se !== -1) {
                c++;
                se += (section.length + 1);
            } else break; 

        } 

        return c;

    }


    this.getSections = function() { 

        if(!rb()) return null; 

        let sections = []; 

        for(var ss = -1, ss1 = -1, se = -1;;) { 

            ss = bt.indexOf(``, se+1);
            ss1 = bt.indexOf(``, ss+1); 

            let section = bt.substring(ss+1, ss1); 

            se = bt.indexOf(`${section}`, ss1); 

            if(ss !== -1 && ss1 !==-1 && se !== -1) {
                sections.push(section);
                se += (section.length + 1);
            } else break; 

        }

        return sections;

    }
    
    new Promise(async () => {

        for(;;) {

            await new Promise((resolve) => setTimeout(resolve, 1000));

            if(changed) {

                changed = false;

                try {
                
                    fs.writeFileSync(basefile, bt, 'utf-8');
                    lastBaseFileUpdate = fs.statSync(basefile).mtimeMs;
                    fs.writeFileSync(basefile + '.reserve', bt, 'utf-8');
                
                } catch {

                    console.error(`node-nk-base writeBase: can't write file with this path(${basefile})!`);
                
                }

            }

        }

    });

    console.log(`node-nk-base started on file "${basefile}"`);

}

module.exports = NKB;
